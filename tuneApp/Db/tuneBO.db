############################################################
#
#                       TUNE SOFT IOC
#                      RECORD DATABASE
#
############################################################
# LOW LEVEL INFO
#
# Desc: Low level IOCs info.

# Corresponding Noise Generator

record(stringout, "$(P)$(R)NoiseGen-Cte"){
    field(DESC, "Corresponding Noise Generator")
    field(VAL, "$(NOISE_GEN)")
}

# Corresponding Carrier Freq Generator

record(stringout, "$(P)$(R)CarrierGen-Cte"){
    field(DESC, "Corresponding Carrier Freq Generator")
    field(VAL, "$(CARRIER_GEN)")
}

# Corresponding Timing

record(stringout, "$(P)$(R)Timing-Cte"){
    field(DESC, "Corresponding Timing Source")
    field(VAL, "$(TIM)")
}

# Carrier generator source 1 status

record(calcout, "$(P)$(R)CarrierGenSrcCalc"){
    field(DESC, "Carrier gen src status calc")
    field(INPA, "$(P)$(R)CarSrc1En-Sts CPP")
    field(INPB, "$(P)$(R)CarSrc2En-Sts CPP")
    field(INPC, "$(P)$(R)CarFreq-RB CPP")
    field(INPD, "$(P)$(R)CarFreqThold-RB CPP")
    field(INPE, "$(P)$(R)EnblNoiseGenAmp-Sts CPP")
    field(CALC, "E=0&&A=0&&B=0?0:(C<D&&(B>0||A=0)?3:(C>=D&&(B=0||A>0)?3:(A>0?1:2)))")
    field(OUT, "$(P)$(R)CarrierGenSrc-Mon PP")
}

record(mbbi, "$(P)$(R)CarrierGenSrc-Mon"){
    field(ZRST, "None")
    field(ONST, "Src 1")
    field(TWST, "Src 2")
    field(THST, "Src misconfig")
    field(THSV, "MINOR")
}

############################################################
# GENERAL
#
# Desc: General control parameters.

record(calcout, "$(P)$(R)EnblMonCalc"){
    field(DESC, "Noise Generator Calc enable status")
    field(INPA, "$(P)$(R)CarSrc1En-Sts CPP")
    field(INPB, "$(P)$(R)CarSrc2En-Srs CPP")
    field(INPC, "$(NOISE_GEN)ChanOut-Sts CPP")
    field(CALC, "(A||B)&&C?3:(C>0?1:(A||B?2:0))")
    field(OUT, "$(P)$(R)EnblNoiseGenAmp-Sts PP")
}

## Convert to 0 or 1
#
record(calcout, "$(P)$(R)EnblNoiseGenMonCalc"){
    field(DESC, "Amplifier calc enable status")
    field(INPA, "$(NOISE_GEN)ChanOut-Sts CPP")
    field(CALC, "A>0?1:0")
    field(OUT, "$(P)$(R)EnblNoiseGen-Sts PP")
}

record(bi, "$(P)$(R)EnblNoiseGen-Sts"){
    field(DESC, "Enable amplifier status")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(calcout, "$(P)$(R)EnblCarrierGenMonCalc"){
    field(DESC, "Carrier calc enable status")
    field(INPA, "$(P)$(R)CarSrc1En-Sts CPP")
    field(INPB, "$(P)$(R)CarSrc2En-Sts CPP")
    field(CALC, "(A||B)?1:0")
    field(OUT, "$(P)$(R)EnblCarrierGen-Sts PP")
}

record(bi, "$(P)$(R)EnblCarrierGen-Sts"){
    field(DESC, "Enable carrier generator status")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

## Instruments status
record(calc, "$(P)$(R)Enbl-Sts"){
    field(DESC, "Instrument bitmask status")
    field(INPA, "$(P)$(R)EnblNoiseGen-Sts CPP")
    field(INPB, "$(P)$(R)EnblCarrierGen-Sts CPP")
    field(INPC, "$(P)$(R)EnblAmp-Sts CPP")
    field(CALC, "((A&1)<<2)|((B&1)<<1)|(C&1)")
}

record(mbbi, "$(P)$(R)EnblNoiseGenAmp-Sts"){
    field(DESC, "Enable noise source status")
    field(ZRST, "Off")
    field(ONST, "Noise gen only")
    field(ONSV, "MINOR")                       # noise gen only = minor alarm
    field(TWST, "Carrier gen only")
    field(TWSV, "MINOR")                       # carrier gen only = minor alarm
    field(THST, "On")
}

record(bo, "$(P)$(R)DriveAuto-Sel"){
    field(DESC, "Enable automatic drive")
    field(PINI, "YES")
    field(ZNAM, "0")
    field(ONAM, "1")
    field(FLNK, "$(P)$(R)DriveAuto-Sts")
}

record(bi, "$(P)$(R)DriveAuto-Sts"){
    field(DESC, "Get automatic drive")
    field(INP,  "$(P)$(R)DriveAuto-Sel")
    field(ZNAM, "0")
    field(ONAM, "1")
}

# For use with seq record below
# 21=(STR1, STR3, STR5, STR7) or 170=(STR2, STR4, STR6, STR8)
record(calc, "$(P)$(R)DriveAutoIdxCalc"){
    field(DESC, "get drive auto propagation index")
    field(SCAN, "Passive")
    field(INPA, "$(P)$(R)DriveAuto-Sts.VAL CPP NMS")
    field(CALC, "A=0?85:170")
}

record(sseq, "$(P)$(R)DriveAutoPropSseq"){
    field(DESC, "get all types of ao OMSL")
    field(PINI, "YES")
    field(STR1, "supervisory")
    field(STR2, "closed_loop")
    field(STR3, "supervisory")
    field(STR4, "closed_loop")
    field(STR5, "0")
    field(STR6, "$(P)$(R)NoiseCalc CPP MSS")
    field(STR7, "0")
    field(STR8, "$(P)$(R)CFreqConvOut CPP MS")
    field(LNK1, "$(P)$(R)NoiseGenSpan-SP.OMSL NPP NMS")
    field(LNK2, "$(P)$(R)NoiseGenSpan-SP.OMSL NPP NMS")
    field(LNK3, "$(P)$(R)CarFreq-SP.OMSL NPP NMS")
    field(LNK4, "$(P)$(R)CarFreq-SP.OMSL NPP NMS")
    field(LNK5, "$(P)$(R)NoiseGenSpan-SP.DOL CA NMS")
    field(LNK6, "$(P)$(R)NoiseGenSpan-SP.DOL CA NMS")
    field(LNK7, "$(P)$(R)CarFreq-SP.DOL CA NMS")
    field(LNK8, "$(P)$(R)CarFreq-SP.DOL CA NMS")
    field(SELL, "$(P)$(R)DriveAutoIdxCalc CPP MS")
    field(SELM, "Mask")
    field(SELN, "1")
    field(FLNK, "$(P)$(R)DriveAutoFilterCalc")
}

# Checks if we need to Process NoiseGenSpan after setting
# DriveAuto to 1. This synchornizes the "Span" value
# to the NoiseGenSpan even if the "Span" value didn't
# change
record(calcout, "$(P)$(R)DriveAutoFilterCalc"){
    field(DESC, "Set FLNK to records if DriveAutoProp")
    field(INPA, "$(P)$(R)DriveAuto-Sts NPP NMS")
    field(CALC, "A>0")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)$(R)DriveAutoFout.PROC PP")
}

record(fanout, "$(P)$(R)DriveAutoFout"){
    field(DESC, "Fanout drive auto FLNK")
    field(SELM, "All")
    field(LNK1, "$(P)$(R)NoiseGenSpan-SP")
    field(LNK2, "$(P)$(R)CarFreq-SP")
}

# Gets frequency either from spectrum analyzer
# or Carrier Generator
# FIXME. Sometimes, a MINOR alaram might occur,
# but that's just because we compared an old value
# of CarFreq-RB
record(calcout, "$(P)$(R)CenterFreqRBCalc") {
    field(DESC, "Get frequency readback")
    field(EGU,  "MHz")
    field(INPA, "$(SPEC_ANA)FreqCenter-RB CPP MSS")
    field(INPB, "$(P)$(R)CarFreq-RB CPP MSS")
    field(INPC, "$(P)$(R)DriveAuto-Sts CPP NMS")
    field(CALC, "C=0?1:(ABS(A-B)<=0.1?1:0)")
    field(LOW,  "0")
    field(LSV,  "MINOR")
    field(OOPT, "Every Time")
    field(OCAL, "A/1000000")
    field(DOPT, "Use OCAL")
    field(OUT,  "0")
}

############################################################
# SPECTURM ANALYZER CONTROL
#
# Desc: Parameters to control spectrum analyzer.

record(mbbo, "$(P)$(R)SpecAnaRBW-Sel"){
    field(DESC, "Resolution Bandwidth")
    field(DTYP, "Soft Channel")
    field(NOBT, "4")
    field(PINI, "YES")
    field(ZRST, "10 Hz")
    field(ZRVL, "10")
    field(ONST, "30 Hz")
    field(ONVL, "30")
    field(TWST, "100 Hz")
    field(TWVL, "100")
    field(THST, "300 Hz")
    field(THVL, "300")
    field(FRST, "1 kHz")
    field(FRVL, "1000")
    field(FVST, "3 kHz")
    field(FVVL, "3000")
    field(SXST, "10 kHz")
    field(SXVL, "10000")
    field(SVST, "30 kHz")
    field(SVVL, "30000")
    field(EIST, "100 kHz")
    field(EIVL, "100000")
    field(NIST, "300 kHz")
    field(NIVL, "300000")
    field(TEST, "1 MHz")
    field(TEVL, "1000000")
    field(ELST, "3 MHz")
    field(ELVL, "3000000")
    field(TVST, "10 MHz")
    field(TVVL, "10000000")
    field(OUT, "$(SPEC_ANA)Rbw-Sel CPP")
}

record(mbbi, "$(P)$(R)SpecAnaRBW-Sts"){
    field(DESC, "Resolution Bandwidth")
    field(DTYP, "Soft Channel")
    field(NOBT, "4")
    field(ZRST, "10 Hz")
    field(ZRVL, "10")
    field(ONST, "30 Hz")
    field(ONVL, "30")
    field(TWST, "100 Hz")
    field(TWVL, "100")
    field(THST, "300 Hz")
    field(THVL, "300")
    field(FRST, "1 kHz")
    field(FRVL, "1000")
    field(FVST, "3 kHz")
    field(FVVL, "3000")
    field(SXST, "10 kHz")
    field(SXVL, "10000")
    field(SVST, "30 kHz")
    field(SVVL, "30000")
    field(EIST, "100 kHz")
    field(EIVL, "100000")
    field(NIST, "300 kHz")
    field(NIVL, "300000")
    field(TEST, "1 MHz")
    field(TEVL, "1000000")
    field(ELST, "3 MHz")
    field(ELVL, "3000000")
    field(TVST, "10 MHz")
    field(TVVL, "10000000")
    field(INP, "$(SPEC_ANA)Rbw-Sts CPP")
}

# Timing delay event offset
record(calcout, "$(P)$(R)SpecAnaTOffCalc") {
    field(DESC, "Timing start spec. offset")
    field(EGU,  "ms")
    field(INPA, "$(TIM)Delay-RB CPP NMS")
    field(CALC, "A/1000")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)SpecAnaTOff-Mon PP")
}

record(ai, "$(P)$(R)SpecAnaTOff-Mon") {
    field(DESC, "Timing start spec. offset")
    field(EGU,  "ms")
    field(PREC, "1")
}

# The TimeDelta PV from SPEC_ANA has an intrinsic jitter,
# as it's caluclated by the IOC. We can, however use an
# heuristic to have a more precise timestamp using timing
# variables from the control system.

record(calcout, "$(P)$(R)SpecAnaTDeltaCalc") {
    field(DESC, "Timing estimated Time Delta")
    field(EGU,  "ms")
    field(INPA, "$(TIM)Duration-RB CPP NMS")
    field(CALC, "A/1000")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)SpecAnaTDelta-Mon PP")
}

record(ai, "$(P)$(R)SpecAnaTDelta-Mon") {
    field(DESC, "Timing estimated Time Delta")
    field(EGU,  "ms")
    field(PREC, "1")
}

record(calc, "$(P)$(R)SpecAnaTEnd-Mon") {
    field(DESC, "Timing estimated Time End")
    field(EGU,  "ms")
    field(INPA, "$(P)$(R)SpecAnaTDelta-Mon CPP NMS")
    field(INPB, "$(P)$(R)SpecAnaTOff-Mon CPP NMS")
    field(CALC, "A+B")
}

record(calc, "$(P)$(R)SpecAnaTBeg-Mon") {
    field(DESC, "Timing estimated Time Beg")
    field(EGU,  "ms")
    field(INPA, "$(P)$(R)SpecAnaTOff-Mon CPP NMS")
    field(CALC, "A")
}


############################################################
# WHITE NOISE CONTROL
#
# Desc: Parameters to control noise generator.

record(ao, "$(P)$(R)NoiseAmpl-SP") {
    field(DESC, "Set noise power")
    field(PINI, "YES")
    field(EGU,  "V")
    field(PREC, "3")
    field(DRVL, "-10.0")
    field(DRVH, "10.0")
    field(LOW,  "-9.0")
    field(HIGH, "9.0")
    field(HSV,  "MINOR")
    field(OUT, "$(NOISE_GEN)Ampl-SP PP")
    field(FLNK, "$(P)$(R)NoiseWfmFunction-Sel")
}

# Always set funtion to "Noise" as we don't need it
record(mbbo, "$(P)$(R)NoiseWfmFunction-Sel") {
    field(DESC, "Select Noise waveform function")
    field(DTYP, "Soft Channel")
    field(ZRST, "Sine")
    field(ONST, "Square")
    field(TWST, "Triangle")
    field(THST, "Ramp")
    field(FRST, "Pulse")
    field(FVST, "Pseudo-random Bit Stream")
    field(SXST, "Noise")
    field(SVST, "Arbitrary")
    field(EIST, "DC")
    field(VAL,  "6")
    field(FLNK, "$(P)$(R)NoiseSweepState-Sel")
    field(OUT, "$(NOISE_GEN)WfmFunction-Sel PP")
}

record(mbbi, "$(P)$(R)NoiseWfmFunction-Sts") {
    field(DESC, "Read Noise waveform function")
    field(DTYP, "Soft Channel")
    field(ZRST, "Sine")
    field(ONST, "Square")
    field(TWST, "Triangle")
    field(THST, "Ramp")
    field(FRST, "Pulse")
    field(FVST, "Pseudo-random Bit Stream")
    field(SXST, "Noise")
    field(SVST, "Arbitrary")
    field(EIST, "DC")
    field(INP, "$(NOISE_GEN)WfmFunction-Sts CPP MSS")
}

# Always set sweep to "OFF" as we don't need it
record(bo, "$(P)$(R)NoiseSweepState-Sel") {
    field(DESC, "Set sweep state")
    field(DTYP, "Soft Channel")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(VAL,  "0")
    field(OUT, "$(NOISE_GEN)SweepState-Sel PP")
}

record(bi, "$(P)$(R)NoiseSweepState-Sts") {
    field(DESC, "Get sweep state")
    field(DTYP, "Soft Channel")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(INP, "$(NOISE_GEN)SweepState-Sts CPP MSS")
}

record(ai, "$(P)$(R)NoiseAmpl-RB") {
    field(DESC, "Get noise amplitude")
    field(INP,  "$(NOISE_GEN)Ampl-RB CPP MSS")
    field(EGU,  "V")
    field(PREC, "3")
}

# Carrier Source accuracy is 2ppm from datasheet
record(ao, "$(P)$(R)CarSrcAcc-SP") {
    field(DESC, "Set carrier accuracy")
    field(PINI, "YES")
    field(EGU,  "ppm")
    field(VAL,  "2")
    field(FLNK, "$(P)$(R)CarSrcAcc-RB")
}

record(ai, "$(P)$(R)CarSrcAcc-RB") {
    field(DESC, "Get carrier accuracy")
    field(INP,  "$(P)$(R)CarSrcAcc-SP NPP NMS")
    field(EGU,  "ppm")
}

# Span meaning for Noise Generator is half of the measurement span.
# Add the carrier generator accuracy to increase the bandwidth so we are
# sure to only be seeing the excited bandwidth at the spectrum analyzer.
record(calc, "$(P)$(R)NoiseCalc"){
    field(DESC, "Noise Span calculation to instrument")
    field(INPA, "$(P)$(R)SpanRBConvOut CPP MSS")
    field(INPB, "$(P)$(R)CarSrcAcc-RB CPP MSS")
    field(INPC, "$(P)$(R)CarFreq-RB CPP MSS")
    field(CALC, "A/2+C*B/1000000")
}

record(ao, "$(P)$(R)NoiseGenSpan-SP"){
    field(DESC, "Noise span")
    field(DRVH, "20000000")
    field(DRVL, "0.001")
    field(EGU, "Hz")
    field(DOL, "$(P)$(R)NoiseCalc CPP MSS")
    field(OMSL,"closed_loop")
    field(OUT, "$(NOISE_GEN)NoiseBw-SP PP")
}

record(ai, "$(P)$(R)NoiseGenSpan-RB"){
    field(DESC, "Noise span RB")
    field(EGU, "Hz")
    field(INP, "$(NOISE_GEN)NoiseBw-RB CPP")
}

############################################################
# CARRIER FREQUENCY CONTROL
#
# Desc: Parameters to control the carrier frequency
#       generator.

# Center Frequency

# Simple conversion between Hz and MHz as the Carrier
# Generator works in MHz but we work in Hz

record(ao, "$(P)$(R)CarSrc1Freq-SP"){
    field(DESC, "Set Carrier Gen Freq. 1")
    field(PINI, "YES")
    field(DRVH, "6000000000")
    field(DRVL, "23500000")
    field(EGU, "Hz")
    field(FLNK, "$(P)$(R)CarSrc1FreqConvOut")
}

record(calcout, "$(P)$(R)CarSrc1FreqConvOut") {
    field(DESC, "Carrier Freq. 1 conversion")
    field(EGU, "MHz")
    field(INPA, "$(P)$(R)CarSrc1Freq-SP")
    field(CALC, "A/1000000")
    field(OOPT, "Every Time")
    field(OUT,  "$(CARRIER_GEN)Src1Freq-SP PP")
    field(FLNK, "$(P)$(R)CarSrc1FreqOff-SP")
}

# Always set offset to 0 as we don't need it
record(ao, "$(P)$(R)CarSrc1FreqOff-SP"){
    field(DESC, "Set Carrier Gen Freq. Off 1")
    field(EGU, "MHz")
    field(OUT, "$(CARRIER_GEN)Src1FreqOffset-SP PP")
    field(VAL, "0")
}

record(ai, "$(P)$(R)CarSrc1FreqOff-RB"){
    field(DESC, "Get Carrier Gen Freq. Off 1")
    field(EGU, "MHz")
    field(INP, "$(CARRIER_GEN)Src1FreqOffset-RB CPP MSS")
}

record(calcout, "$(P)$(R)CarSrc1FreqConvIn"){
    field(DESC, "Get Carrier Gen Freq. 1")
    field(EGU, "MHz")
    field(INPA, "$(CARRIER_GEN)Src1Freq-RB CPP MSS")
    field(CALC, "A*1000000")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)CarSrc1Freq-RB PP MSS")
}

record(ai, "$(P)$(R)CarSrc1Freq-RB"){
    field(DESC, "Get Carrier Gen Freq. 1")
    field(INP,  "$(P)$(R)CarSrc1FreqConvIn")
    field(EGU, "Hz")
}

record(ao, "$(P)$(R)CarSrc2Freq-SP"){
    field(DESC, "Set Carrier Gen Freq. 2")
    field(PINI, "YES")
    field(DRVH, "6000000000")
    field(DRVL, "23500000")
    field(EGU, "Hz")
    field(FLNK, "$(P)$(R)CarSrc2FreqConvOut")
}

record(calcout, "$(P)$(R)CarSrc2FreqConvOut") {
    field(DESC, "Carrier Freq. 2 conversion")
    field(EGU, "MHz")
    field(INPA, "$(P)$(R)CarSrc2Freq-SP")
    field(CALC, "A/1000000")
    field(OOPT, "Every Time")
    field(OUT,  "$(CARRIER_GEN)Src2Freq-SP PP")
    field(FLNK, "$(P)$(R)CarSrc2FreqOff-SP")
}

# Always set offset to 0 as we don't need it
record(ao, "$(P)$(R)CarSrc2FreqOff-SP"){
    field(DESC, "Set Carrier Gen Freq. Off 2")
    field(EGU, "MHz")
    field(OUT, "$(CARRIER_GEN)Src2FreqOffset-SP PP")
    field(VAL, "0")
}

record(ai, "$(P)$(R)CarSrc2FreqOff-RB"){
    field(DESC, "Get Carrier Gen Freq. Off 2")
    field(EGU, "MHz")
    field(INP, "$(CARRIER_GEN)Src2FreqOffset-RB CPP MSS")
}

record(calcout, "$(P)$(R)CarSrc2FreqConvIn"){
    field(DESC, "Get Carrier Gen Freq. 2")
    field(EGU, "MHz")
    field(INPA, "$(CARRIER_GEN)Src2Freq-RB CPP MSS")
    field(CALC, "A*1000000")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)CarSrc2Freq-RB PP MSS")
}

record(ai, "$(P)$(R)CarSrc2Freq-RB"){
    field(DESC, "Get Carrier Gen Freq. 2")
    field(INP,  "$(P)$(R)CarSrc2FreqConvIn")
    field(EGU, "Hz")
}

###########
# Enable/Disable Output and Buffers
##########

record(bo, "$(P)$(R)CarSrc1En-Sel"){
    field(DESC, "Enable Carrier Gen Source 1")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(FLNK, "$(P)$(R)CarSrc1EnCalcOut")
}

record(calc, "$(P)$(R)CarSrc1EnCalcOut"){
    field(DESC, "Enable Carrier Gen Source 1")
    field(INPA, "$(P)$(R)CarSrc1En-Sel")
    field(CALC, "A=0?7:56")                         # A=0? Link 1, 2, 3 : Link 4, 5, 6
    field(FLNK, "$(P)$(R)CarSrc1EnSeq")
}

record(seq, "$(P)$(R)CarSrc1EnSeq") {
    field(DESC, "Enable Carrier Gen Source 1")
    field(SELM, "Mask")
    field(SELL, "$(P)$(R)CarSrc1EnCalcOut")
    field(DO1, "0")
    field(LNK1, "$(CARRIER_GEN)Src1PwrOn-Sel PP")
    field(DO2, "0")
    field(LNK2, "$(CARRIER_GEN)Src1EnblBuffAmp-Sel PP")
    field(DO3, "-60")
    field(LNK3, "$(CARRIER_GEN)Src1Pwr-SP PP")
    field(DO4, "1")
    field(LNK4, "$(CARRIER_GEN)Src1PwrOn-Sel PP")
    field(DO5, "1")
    field(LNK5, "$(CARRIER_GEN)Src1EnblBuffAmp-Sel PP")
    field(DO6, "-10")
    field(LNK6, "$(CARRIER_GEN)Src1Pwr-SP PP")
}

record(calcout, "$(P)$(R)CarSrc1EnCalcIn"){
    field(DESC, "Get Carrier Gen Source 1 status")
    field(INPA, "$(CARRIER_GEN)Src1PwrOn-Sts CPP MSS")
    field(INPB, "$(CARRIER_GEN)Src1EnblBuffAmp-Sts CPP MSS")
    field(CALC, "A=1&&B=1?1:0")
    field(OUT,  "$(P)$(R)CarSrc1En-Sts PP")
}

record(bi, "$(P)$(R)CarSrc1En-Sts"){
    field(DESC, "Get Carrier Gen Source 1 Status")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(bo, "$(P)$(R)CarSrc2En-Sel"){
    field(DESC, "Enable Carrier Gen Source 2")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(FLNK, "$(P)$(R)CarSrc2EnCalcOut")
}

record(calc, "$(P)$(R)CarSrc2EnCalcOut"){
    field(DESC, "Enable Carrier Gen Source 2")
    field(INPA, "$(P)$(R)CarSrc2En-Sel")
    field(CALC, "A=0?7:56")                         # A=0? Link 1, 2, 3 : Link 4, 5, 6
    field(FLNK, "$(P)$(R)CarSrc2EnSeq")
}

record(seq, "$(P)$(R)CarSrc2EnSeq") {
    field(DESC, "Enable Carrier Gen Source 2")
    field(SELM, "Mask")
    field(SELL, "$(P)$(R)CarSrc2EnCalcOut")
    field(DO1, "0")
    field(LNK1, "$(CARRIER_GEN)Src2PwrOn-Sel PP")
    field(DO2, "0")
    field(LNK2, "$(CARRIER_GEN)Src2EnblBuffAmp-Sel PP")
    field(DO3, "-60")
    field(LNK3, "$(CARRIER_GEN)Src2Pwr-SP PP")
    field(DO4, "1")
    field(LNK4, "$(CARRIER_GEN)Src2PwrOn-Sel PP")
    field(DO5, "1")
    field(LNK5, "$(CARRIER_GEN)Src2EnblBuffAmp-Sel PP")
    field(DO6, "-10")
    field(LNK6, "$(CARRIER_GEN)Src2Pwr-SP PP")
}

record(calcout, "$(P)$(R)CarSrc2EnCalcIn"){
    field(DESC, "Get Carrier Gen Source 2 status")
    field(INPA, "$(CARRIER_GEN)Src2PwrOn-Sts CPP MSS")
    field(INPB, "$(CARRIER_GEN)Src2EnblBuffAmp-Sts CPP MSS")
    field(CALC, "A=1&&B=1?1:0")
    field(OUT,  "$(P)$(R)CarSrc2En-Sts PP")
}

record(bi, "$(P)$(R)CarSrc2En-Sts"){
    field(DESC, "Get Carrier Gen Source 2 Status")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

############################################################

record(ao, "$(P)$(R)CarFreq-SP"){
    field(DESC, "Noise center freq")
    field(DRVH, "6000000000")
    field(DRVL, "23500000")
    field(EGU, "Hz")
    field(DOL, "$(P)$(R)CFreqConvOut CPP MS")
    field(OMSL,"closed_loop")
    field(FLNK, "$(P)$(R)CarFreqCalc1")
}

record(calcout, "$(P)$(R)CarFreqCalc1"){
    field(DESC, "Calc for selecting carrier output src")
    field(INPA, "$(P)$(R)CarFreq-SP")
    field(INPB, "$(P)$(R)CarFreqThold-RB")
    field(CALC, "A<B?19:44")             # A<B ? links 1,2,5 : links 3,4,6
    field(FLNK, "$(P)$(R)CarFreqSeq1")
}

# Don't disable sources unnecessarilly, just set
# the frequency on correct carrier gen channel
record(seq, "$(P)$(R)CarFreqSeq1"){
    field(DESC, "Select carrier output src")
    field(SELM, "Mask")
    field(SELL, "$(P)$(R)CarFreqCalc1")
    field(DO1, "0")
    field(LNK1, "$(P)$(R)CarSrc2En-Sel PP")   # Disable src 2 &
    field(DOL2, "$(P)$(R)CarFreq-SP")
    field(LNK2, "$(P)$(R)CarSrc1Freq-SP PP")   # Set src 1 freq;
    field(DO3, "0")
    field(LNK3, "$(P)$(R)CarSrc1En-Sel PP")   # Disable src 1 &
    field(DOL4, "$(P)$(R)CarFreq-SP")
    field(LNK4, "$(P)$(R)CarSrc2Freq-SP PP")   # Set src 2 freq;
    field(DO5, "1")
    field(LNK5, "$(P)$(R)CarSrc1En-Sel PP")   # Wait a while so values are settled in the carrier gen, then Enable src 1
    field(DLY5, "0.5")
    field(DO6, "1")
    field(LNK6, "$(P)$(R)CarSrc2En-Sel PP")   # Wait a while so values are settled in the carrier gen, then Enable src 2
    field(DLY6, "0.5")
}

record(calcout, "$(P)$(R)FreqSrcMonCalc"){
    field(DESC, "Get center freq value")
    field(INPA, "$(P)$(R)CarSrc1Freq-RB CPP MSS")
    field(INPB, "$(P)$(R)CarSrc2Freq-RB CPP MSS")
    field(INPC, "$(P)$(R)CarSrc1En-Sts CPP")
    field(INPD, "$(P)$(R)CarSrc2En-Sts CPP")
    field(CALC, "C>0||D>0")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "C>0?A:B")
    field(OUT, "$(P)$(R)CarFreq-RB PP MSS")
}

record(ai, "$(P)$(R)CarFreq-RB"){
    field(DESC, "Noise center freq RB")
    field(EGU, "Hz")
}

# Center Frequency Threshold
# (used for changing source used)

record(ao, "$(P)$(R)CarFreqThold-SP"){
    field(DESC, "Freq threshold for changing source")
    field(PINI, "YES")
    field(DRVH, "6000000000")
    field(DRVL, "23500000")
    field(EGU, "Hz")
    field(FLNK, "$(P)$(R)CarFreqThold-RB")
    field(VAL, "255000000")
}

record(ai, "$(P)$(R)CarFreqThold-RB"){
    field(DESC, "Freq threshold for changing source RB")
    field(EGU, "Hz")
    field(INP, "$(P)$(R)CarFreqThold-SP")
}

# C=0? link 1, 2, 3, 4 : C=1: A<B ? link 6, 7, 8 : links 5, 7, 8
record(calcout, "$(P)$(R)EnblExctCalc"){
    field(DESC, "Enable/Disable excitation sources")
    field(INPA, "$(P)$(R)CarFreq-SP")
    field(INPB, "$(P)$(R)CarFreqThold-RB")
    field(INPC, "$(P)$(R)Enbl-Sel")
    field(CALC, "C=0?15:(A<B?224:208)")
    field(FLNK, "$(P)$(R)EnblCarNoiseSrcSeq")
}

record(seq, "$(P)$(R)EnblCarNoiseSrcSeq"){
    field(DESC, "Select carrier output src")
    field(SELM, "Mask")
    field(SELL, "$(P)$(R)EnblExctCalc")
    field(DO1, "0")
    field(LNK1, "$(P)$(R)CarSrc2En-Sel PP")      # Disable src 2 &
    field(DO2, "0")
    field(LNK2, "$(P)$(R)CarSrc1En-Sel PP")      # Disable src 1 &
    field(DO3, "0")
    field(LNK3, "$(NOISE_GEN)ChanOut-Sel PP")      # Disable noise generator;
    field(DO4, "0")
    field(LNK4, "$(AMP)Enbl-Sel PP")               # Disable amplifier;
    field(DO5, "1")
    field(LNK5, "$(P)$(R)CarSrc2En-Sel PP")      # Enable src 2 &
    field(DO6, "1")
    field(LNK6, "$(P)$(R)CarSrc1En-Sel PP")      # Enable src 1 &
    field(DO7, "1")
    field(LNK7, "$(NOISE_GEN)ChanOut-Sel PP")      # Enable noise generator;
    field(DO8, "1")
    field(LNK8, "$(AMP)Enbl-Sel PP")               # Enable amplifier;
}

# INITIALIZATION
#
# Desc: Initialization of devices.

# Reset

record(bo, "$(P)$(R)Rst-Cmd"){
    field(DESC, "Rst IOC parameters")
    field(PINI, "YES")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(HIGH, "2")
    field(VAL, "1")
    field(FLNK, "$(P)$(R)ValidRst")
}

record(calcout, "$(P)$(R)ValidRst"){
    field(DESC, "Validate download cmd")
    field(INPA, "$(P)$(R)Rst-Cmd")
    field(CALC, "A")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)$(R)InitSeqNoiseGen.PROC PP")
}

# Init Noise Gen parameters

record(sseq, "$(P)$(R)InitSeqNoiseGen"){
    field(DESC, "Init sequence Noise Gen")
    field(SELM, "All")
    field(STR1, "Noise")
    field(LNK1, "$(NOISE_GEN)WfmFunction-Sel PP") # Select 'Noise' function
    field(DLY1,  "0.5")
    field(DO2,  "0.2")
    field(LNK2, "$(NOISE_GEN)Ampl-SP PP")         # Set sanity Amplitude
    field(DO3,  "0.0")
    field(LNK3, "$(NOISE_GEN)Offset-SP PP")       # Set sanity Offset
    field(DO4,  "1")
    field(LNK4, "$(P)$(R)Span-SP.PROC PP")        # Process span
    field(STR5,  "OFF")
    field(LNK5, "$(NOISE_GEN)SweepState-Sel PP")  # Turn sweep off
    field(FLNK, "$(P)$(R)InitSeqCarGen")
}

# Init Carrier Gen parameters

record(sseq, "$(P)$(R)InitSeqCarGen"){
    field(DESC, "Init sequence Car. Generator")
    field(SELM, "All")
    field(DO1, "1")
    field(LNK1, "$(P)$(R)CarFreq-SP.PROC PP")     # Process center freq
    field(FLNK, "$(P)$(R)InitSeqAmp")
}

# Init Amplifier parameters

record(sseq, "$(P)$(R)InitSeqAmp"){
    field(DESC, "Init sequence Amplifier")
    field(SELM, "All")
    field(DO1,  "1")
    field(LNK1, "$(AMP)GainAuto-Sel")             # Lock dBs with steps
    field(DLY1,  "0.5")
    field(DO2,  "32")
    field(LNK2, "$(P)$(R)Gain-SP PP")             # Set minimal Gain
    field(FLNK, "$(P)$(R)InitSeqSpecAna")
}

# Init Spectrum Analyzer parameters

record(sseq, "$(P)$(R)InitSeqSpecAna"){
    field(DESC, "Init sequence Spec. Analyzer")
    field(SELM, "All")
    field(STR1, "OFF")
    field(LNK1, "$(SPEC_ANA)EnblTrkGen-Sel PP")            # Set Tracking Generator to OFF
    field(DLY1,  "0.5")
    field(STR2, "FFT")
    field(LNK2, "$(SPEC_ANA)FiltType-Sel PP")            # Set mode to FFT
    field(STR3, "ON")
    field(LNK3, "$(SPEC_ANA)EnblSweTimeAuto-Sel PP")     # Set Time Coupling
    field(STR4, "ON")
    field(LNK4, "$(SPEC_ANA)EnblAttAuto-Sel PP")         # Enable Ref. Level Att.
    field(DO5, "1")
    field(LNK5, "$(P)$(R)SpecAnaRBW-Sel.PROC PP")        # Resolution bandwidth
    field(DLY5,  "0.5")
    field(STR6, "ON")
    field(LNK6, "$(P)$(R)SpecAnaGetSpec-Sel PP")         # Turn acquisition on
    field(STR7, "EXT")
    field(LNK7, "$(SPEC_ANA)TrigSrc-Sel PP")             # External Trigger
    field(STR8, "CONTINUOUS")
    field(LNK8, "$(SPEC_ANA)EnblContSwe-Sel PP")         # Continuous sweep
    field(STR9, "ON")
    field(LNK9, "$(SPEC_ANA)EnblVbwAuto-Sel PP")         # Auto Video Bandwidth
    field(FLNK, "$(P)$(R)InitSeqEnbl")
}

# Power Excitation

record(sseq, "$(P)$(R)InitSeqEnbl"){
    field(DESC, "Init sequence Enable")
    field(DO1, "1")
    field(LNK1, "$(P)$(R)Enbl-Sel.PROC PP")              # Enable Excitation
    field(SELM, "All")
}
