############################################################
#
#                       TUNE SOFT IOC
#                      RECORD DATABASE
#
############################################################
# LOW LEVEL INFO
#
# Desc: Low level IOCs info.

# Corresponding Spectrum Analyzer Freq Generator

record(stringout, "$(P)$(R)SpecAna-Cte"){
    field(DESC, "Corresponding Spectrum Analyzer")
    field(VAL, "$(SPEC_ANA)")
}

# Corresponding Amplifier

record(stringout, "$(P)$(R)Amp-Cte"){
    field(DESC, "Corresponding Amplifier")
    field(VAL, "$(AMP)")
}

############################################################
# GENERAL
#
# Desc: General control parameters.

# Enable

record(bo, "$(P)$(R)Enbl-Sel"){
    field(DESC, "Enable excitation sources")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(FLNK, "$(P)$(R)EnblExctCalc")
}

record(calcout, "$(P)$(R)EnblAmpMonCalc"){
    field(DESC, "Amplifier calc enable status")
    field(INPA, "$(AMP)Enbl-Sts CPP")
    field(CALC, "A>0?1:0")
    field(OUT, "$(P)$(R)EnblAmp-Sts PP")
}

record(bi, "$(P)$(R)EnblAmp-Sts"){
    field(DESC, "Enable amplifier status")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(ao, "$(P)$(R)Span-SP") {
    field(DESC, "Set measurement span")
    field(PREC, "3")
    field(PINI, "YES")
    field(EGU,  "KHz")
    field(FLNK, "$(P)$(R)SpanSPConvOut")
}

record(calcout, "$(P)$(R)SpanSPConvOut") {
    field(DESC, "Span SP conversion")
    field(EGU, "Hz")
    field(INPA, "$(P)$(R)Span-SP")
    field(CALC, "A*1000")
    field(OOPT, "Every Time")
    field(OUT,  "$(SPEC_ANA)FreqSpan-SP")
    field(FLNK, "$(P)$(R)Span-RB")
}

record(ai, "$(P)$(R)Span-RB") {
    field(DESC, "Get measurement span")
    field(PREC, "3")
    field(EGU,  "KHz")
    field(INP, "$(P)$(R)Span-SP")
    field(FLNK, "$(P)$(R)SpanRBConvOut")
}

record(calcout, "$(P)$(R)SpanRBConvOut") {
    field(DESC, "Span RB conversion")
    field(EGU, "Hz")
    field(INPA, "$(P)$(R)Span-RB NPP MSS")
    field(CALC, "A*1000")
    field(OOPT, "Every Time")
}

record(bo, "$(P)$(R)CenterFreqAuto-Sel"){
    field(DESC, "Enable automatic drive")
    field(PINI, "YES")
    field(ZNAM, "0")
    field(ONAM, "1")
    field(FLNK, "$(P)$(R)CenterFreqAuto-Sts")
}

record(bi, "$(P)$(R)CenterFreqAuto-Sts"){
    field(DESC, "Get automatic center freq")
    field(INP,  "$(P)$(R)CenterFreqAuto-Sel")
    field(ZNAM, "0")
    field(ONAM, "1")
}

# For use with seq record below
# 5=(STR1 and STR3) or 10=(STR2 and STR4)
record(calc, "$(P)$(R)CenterFreqAutoIdxCalc"){
    field(DESC, "get center freq auto propagation index")
    field(SCAN, "Passive")
    field(INPA, "$(P)$(R)CenterFreqAuto-Sts.VAL CPP NMS")
    field(CALC, "A=0?5:10")
}

record(sseq, "$(P)$(R)CenterFreqAutoPropSseq"){
    field(DESC, "get all types of ao OMSL")
    field(PINI, "YES")
    field(STR1, "supervisory")
    field(STR2, "closed_loop")
    field(STR3, "0")
    field(STR4, "$(P)$(R)CFreqCalc.OVAL CPP MS")
    field(LNK1, "$(P)$(R)CenterFreq-SP.OMSL NPP NMS")
    field(LNK2, "$(P)$(R)CenterFreq-SP.OMSL NPP NMS")
    field(LNK3, "$(P)$(R)CenterFreq-SP.DOL CA NMS")
    field(LNK4, "$(P)$(R)CenterFreq-SP.DOL CA NMS")
    field(SELL, "$(P)$(R)CenterFreqAutoIdxCalc CPP MS")
    field(SELM, "Mask")
    field(SELN, "1")
    field(FLNK, "$(P)$(R)CenterFreqAutoFilter-SP")
}

# Checks if we need to Process CenterFreq after setting
# CenterFreqAuto to 1. This synchornizes the "Span" value
# to the CenterFreq even if the "Span" value didn't
# change
record(calcout, "$(P)$(R)CenterFreqAutoFilter-SP"){
    field(DESC, "Set FLNK to records")
    field(INPA, "$(P)$(R)CenterFreqAuto-Sts NPP NMS")
    field(CALC, "A>0")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)$(R)CenterFreqAutoFout.PROC PP")
}

record(fanout, "$(P)$(R)CenterFreqAutoFout"){
    field(DESC, "Fanout center freq auto FLNK")
    field(SELM, "All")
    field(LNK1, "$(P)$(R)CenterFreq-SP")
}

record(ao, "$(P)$(R)CenterFreq-SP") {
    field(DESC, "Set center freq")
    field(PREC, "6")
    field(PINI, "YES")
    field(EGU,  "MHz")
    field(DOL,  "$(P)$(R)CFreqCalc.OVAL CPP MSS")
    field(OMSL, "closed_loop")
    field(FLNK, "$(P)$(R)CFreqConvOut")
}

record(calcout, "$(P)$(R)CFreqConvOut") {
    field(DESC, "Center Freq. conversion")
    field(EGU, "Hz")
    field(INPA, "$(P)$(R)CenterFreq-SP")
    field(CALC, "A*1000000")
    field(OOPT, "Every Time")
    field(OUT,  "$(SPEC_ANA)FreqCenter-SP")
}

record(ai, "$(P)$(R)CenterFreq-RB") {
    field(DESC, "Get center freq")
    field(PREC, "6")
    field(INP,  "$(P)$(R)CenterFreqRBCalc.OVAL CPP MSS")
    field(EGU,  "MHz")
    field(FLNK, "$(P)$(R)RevNCalc")
}

# Center Frequency, if not in auto mode, sets RevN and Offset
record(calcout, "$(P)$(R)RevNCalc") {
    field(DESC, "Rev. N from Center Freq.")
    field(INPA, "$(P)$(R)CFreqConvOut")
    field(INPB, "$(P)$(R)FreqRev-Mon CPP")
    field(INPC, "$(P)$(R)CenterFreqAuto-Sts NPP")
    field(CALC, "C=0?((A/B)>1?FLOOR(A/B):1):0")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)$(R)RevN-SP PP")
    field(FLNK, "$(P)$(R)FreqOffCalc")
}

record(calcout, "$(P)$(R)FreqOffCalc") {
    field(DESC, "Offset frequency from Center Freq.")
    field(EGU, "KHz")
    field(INPA, "$(P)$(R)CFreqConvOut")
    field(INPB, "$(P)$(R)FreqRev-Mon CPP")
    field(INPC, "$(P)$(R)CenterFreqAuto-Sts NPP")
    field(INPD, "$(P)$(R)RevNCalc")
    field(CALC, "C=0?(A-B*D)/1000:0")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)$(R)FreqOff-SP PP")
}

############################################################
# AMLIFIER CONTROL
#
# Desc: Parameters to amplifier.

record(ao, "$(P)$(R)AmpGain-SP") {
    field(DESC, "Set Gain Control")
    field(DTYP, "Soft Channel")
    field(EGU, "dB")
    field(PREC, "2")
    field(DRVL, "30.0")
    field(DRVH, "49.0")
    field(HIGH, "48.5")
    field(HSV,  "MINOR")
    field(PINI, "YES")
    field(OUT, "$(AMP)Gain-SP PP")
}

record(ai, "$(P)$(R)AmpGain-RB") {
    field(DESC, "Get Gain Control")
    field(INP,  "$(AMP)Gain-RB CPP MSS")
    field(EGU,  "dB")
    field(PREC, "2")
}

############################################################
# SPECTURM ANALYZER CONTROL
#
# Desc: Parameters to control spectrum analyzer.

record(bo, "$(P)$(R)SpecAnaGetSpec-Sel"){
    field(DESC, "Set enable spec. analyzer status")
    field(PINI, "YES")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(OUT,  "$(SPEC_ANA)GetSpectrum-Sel PP")
    field(FLNK, "$(P)$(R)SpecAnaGetSpec-Sts")
}

record(bi, "$(P)$(R)SpecAnaGetSpec-Sts"){
    field(DESC, "Get enable spec. analyzer status")
    field(INP,  "$(SPEC_ANA)GetSpectrum-Sts CPP")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}

record(bo, "$(P)$(R)SpecAnaTrkGen-Sel") {
  field(DESC, "Enable or Disable Tracking Generator")
  field(PINI, "YES")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "$(SPEC_ANA)EnblTrkGen-Sel PP")
}

record(bi, "$(P)$(R)SpecAnaTrkGen-Sts") {
  field(DESC, "Get Tracking Generator State")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "$(SPEC_ANA)EnblTrkGen-Sts CPP MSS")
}

record(ao, "$(P)$(R)SpecAnaTrkGenLvl-SP") {
  field(DESC, "Set Tracking Generators Level")
  field(PINI, "NO")
  field(PREC, "3")
  field(EGU, "dBm")
  field(OUT, "$(SPEC_ANA)TrkGenLvl-SP PP")
}

record(ai, "$(P)$(R)SpecAnaTrkGenLvl-RB") {
  field(DESC, "Get Tracking Generators Level")
  field(PREC, "3")
  field(EGU, "dBm")
  field(INP, "$(SPEC_ANA)TrkGenLvl-RB CPP MSS")
}

# Timing delay event offset
record(calcout, "$(P)$(R)SpecAnaTOffCalc") {
    field(DESC, "Timing start spec. offset")
    field(EGU,  "ms")
    field(INPA, "$(TIM)Delay-RB CPP NMS")
    field(CALC, "A/1000")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)SpecAnaTOff-Mon PP")
}

record(ai, "$(P)$(R)SpecAnaTOff-Mon") {
    field(DESC, "Timing start spec. offset")
    field(EGU,  "ms")
    field(PREC, "1")
}

# The TimeDelta PV from SPEC_ANA has an intrinsic jitter,
# as it's caluclated by the IOC. We can, however use an
# heuristic to have a more precise timestamp using timing
# variables from the control system.

record(calcout, "$(P)$(R)SpecAnaTDeltaCalc") {
    field(DESC, "Timing estimated Time Delta")
    field(EGU,  "ms")
    field(INPA, "$(TIM)Duration-RB CPP NMS")
    field(CALC, "A/1000")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)SpecAnaTDelta-Mon PP")
}

record(ai, "$(P)$(R)SpecAnaTDelta-Mon") {
    field(DESC, "Timing estimated Time Delta")
    field(EGU,  "ms")
    field(PREC, "1")
}

record(calc, "$(P)$(R)SpecAnaTEnd-Mon") {
    field(DESC, "Timing estimated Time End")
    field(EGU,  "ms")
    field(INPA, "$(P)$(R)SpecAnaTDelta-Mon CPP NMS")
    field(INPB, "$(P)$(R)SpecAnaTOff-Mon CPP NMS")
    field(CALC, "A+B")
}

record(calc, "$(P)$(R)SpecAnaTBeg-Mon") {
    field(DESC, "Timing estimated Time Beg")
    field(EGU,  "ms")
    field(INPA, "$(P)$(R)SpecAnaTOff-Mon CPP NMS")
    field(CALC, "A")
}

# Time Vector
# Assuming maximum of 1000 frames

record(seq, "$(P)$(R)TimeArrayWvfSeq"){
    field(DESC, "Get frame count seq")
    field(PINI, "YES")
    field(DOL1, "$(SPEC_ANA)FrameCount-Mon.VAL CPP NMS")
    field(LNK1, "$(P)$(R)TimeArray-Mon.NELM CPP NMS")
    field(SELM, "All")
}

record(acalcout, "$(P)$(R)TimeArrayCalc") {
    field(DESC, "Time vector for spectrogram")
    field(PREC, "1")
    field(NELM, "1000")
    field(EGU,  "ms")
    field(INPA, "$(P)$(R)SpecAnaTOff-Mon CPP NMS")
    field(INPB, "$(P)$(R)SpecAnaTDelta-Mon CPP NMS")
    field(INPC, "$(SPEC_ANA)FrameCount-Mon CPP NMS")
    field(CALC, "(C<2)?IX*B+A:IX*B/(C-1)+A")
    field(OUT,  "$(P)$(R)TimeArrayWvf CPP NMS")
}

record(waveform,"$(P)$(R)TimeArrayWvf") {
    field(DESC, "Time vector for spectrogram")
    field(PREC, "1")
    field(EGU,  "ms")
    field(NELM, "1000")
    field(FTVL, "DOUBLE")
    field(FLNK, "$(P)$(R)TimeArray-Mon")
}

record(subArray, "$(P)$(R)TimeArray-Mon") {
    field(DESC, "Time vector for spectrogram")
    field(PREC, "1")
    field(EGU,  "ms")
    field(FTVL, "DOUBLE")
    field(MALM, "1000")
    field(INP,  "$(P)$(R)TimeArrayWvf NPP NMS")
}

############################################################
# MACHINE PARAMETERS
#
# Desc: Machine Parameters

# Select machine

record(mbbo, "$(P)$(R)Machine-Sel") {
    field(DESC, "Select Booster or Storage Ring")
    field(PINI, "YES")
    field(ZRST, "BO")
    field(ZRVL, "0")
    field(ONST, "SI")
    field(ONVL, "1")
    field(FLNK, "$(P)$(R)Machine-Sts")
}

record(mbbi, "$(P)$(R)Machine-Sts") {
    field(DESC, "Get Booster or Storage Ring")
    field(INP,  "$(P)$(R)Machine-Sel")
    field(ZRST, "BO")
    field(ZRVL, "0")
    field(ONST, "SI")
    field(ONVL, "1")
}

record(longin, "$(P)$(R)BOH-Cte") {
    field(DESC, "Booster RF Harmonic Number")
    field(PINI, "YES")
    field(VAL, "828")
}

record(longin, "$(P)$(R)SIH-Cte") {
    field(DESC, "Storage Ring RF Harmonic Number")
    field(PINI, "YES")
    field(VAL, "864")
}

# Calculate harmonic number

record(calc, "$(P)$(R)H-RB") {
    field(INPA, "$(P)$(R)Machine-Sts CPP")
    field(INPB, "$(P)$(R)BOH-Cte CPP")
    field(INPC, "$(P)$(R)SIH-Cte CPP")
    field(CALC, "A=0?B:C")
}

# RF Frequency
# The value is fetched from another IOC or given by the user

record(ai, "$(P)$(R)RFFreq-Mon") {
    field(DESC, "RF Frequency")
    field(PINI, "YES")
    field(EGU, "Hz")
    field(VAL, "499658000")
}

# Define which revolution harmonic will be analized
# The number is entered via OPI and corresponding frequency calculated
# The harmonic frequency may then be used as the Center Frequency

record(ao, "$(P)$(R)RevN-SP") {
    field(DESC, "Set revolution harmonic")
    field(PINI, "YES")
    field(DRVL, "1")
    field(DRVH, "100000000")
    field(FLNK, "$(P)$(R)RevN-RB")
}

record(ai, "$(P)$(R)RevN-RB") {
    field(DESC, "Get revolution harmonic")
    field(INP, "$(P)$(R)RevN-SP")
}

record(calc, "$(P)$(R)FreqRev-Mon") {
    field(DESC, "Monitor revolution frequency")
    field(EGU, "Hz")
    field(INPA, "$(P)$(R)H-RB CPP")
    field(INPB, "$(P)$(R)RFFreq-Mon CPP")
    field(CALC, "B/A")
}

record(calc, "$(P)$(R)FreqRevN-Mon") {
    field(DESC, "Monitor harmonic revolution frequency")
    field(PREC, "3")
    field(EGU, "KHz")
    field(INPA, "$(P)$(R)FreqRev-Mon CPP")
    field(INPB, "$(P)$(R)RevN-RB CPP")
    field(CALC, "(A*B)/1000")
    field(FLNK, "$(P)$(R)FreqRevNConvOut")
}

record(calc, "$(P)$(R)FreqRevNConvOut") {
    field(DESC, "Freq. RevN conversion")
    field(EGU, "Hz")
    field(INPA, "$(P)$(R)FreqRevN-Mon NPP MSS")
    field(CALC, "A*1000")
}

record(ao, "$(P)$(R)FreqOff-SP") {
    field(DESC, "Set offset frequency from harmonic freq")
    field(PREC, "3")
    field(PINI, "YES")
    field(EGU, "KHz")
    field(DRVL, "0.0")
    field(DRVH, "10000000")
    field(FLNK, "$(P)$(R)FOffSPConvOut")
}

record(calcout, "$(P)$(R)FOffSPConvOut") {
    field(DESC, "Freq. offset SP conversion")
    field(EGU, "Hz")
    field(INPA, "$(P)$(R)FreqOff-SP")
    field(CALC, "A*1000")
    field(OOPT, "Every Time")
    field(FLNK, "$(P)$(R)FreqOff-RB")
}

record(ai, "$(P)$(R)FreqOff-RB") {
    field(DESC, "Get offset frequency from harmonic freq")
    field(PREC, "3")
    field(EGU, "KHz")
    field(INP, "$(P)$(R)FreqOff-SP")
    field(FLNK, "$(P)$(R)FOffRBConvOut")
}

record(calcout, "$(P)$(R)FOffRBConvOut") {
    field(DESC, "Freq. offset RB conversion")
    field(EGU, "Hz")
    field(INPA, "$(P)$(R)FreqOff-RB")
    field(CALC, "A*1000")
    field(OOPT, "Every Time")
}

record(calcout, "$(P)$(R)CFreqCalc") {
    field(DESC, "Monitored calculated frequency")
    field(EGU, "MHz")
    field(INPA, "$(P)$(R)FOffRBConvOut CPP")
    field(INPB, "$(P)$(R)FreqRevNConvOut CPP")
    field(INPC, "$(P)$(R)CenterFreqAuto-Sts CPP")
    field(CALC, "C>0")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "(A+B)/1000000")
}

# Frequency/Time vectors
#
# Get NORD from SPEC_ANA
record(seq, "$(P)$(R)FreqArrayWvfSeq"){
    field(DESC, "Get NORD from waveform")
    field(PINI, "YES")
    field(DOL1, "$(SPEC_ANA)TraceLen-Mon CPP NMS")
    field(DOL2, "$(SPEC_ANA)TraceLen-Mon NPP NMS")
    field(LNK1, "$(P)$(R)TuneFracArray-Mon.NELM CPP NMS")
    field(LNK2, "$(P)$(R)FreqArray-Mon.NELM CPP NMS")
    field(SELM, "All")
}

# Calculate Fractional Tune parameters
record(acalcout, "$(P)$(R)TuneFracArrayCalc") {
    field(DESC, "Fractional Tune Array")
    field(PREC, "3")
    field(NELM, "32001")
    field(INAA, "$(SPEC_ANA)FreqArray-Mon.AVAL CPP")
    field(INPA, "$(P)$(R)RFFreq-Mon CPP NMS")
    field(INPB, "$(P)$(R)H-RB CPP NMS")
    field(INPC, "$(P)$(R)RevN-RB CPP NMS")
    field(CALC, "AA/(A/1000000/B)")
    field(OUT,  "$(P)$(R)TuneFracArrayWvf CPP NMS")
}

record(waveform,"$(P)$(R)TuneFracArrayWvf") {
    field(DESC, "Fractional Tune Array")
    field(PREC, "3")
    field(NELM, "32001")
    field(FTVL, "DOUBLE")
    field(FLNK, "$(P)$(R)TuneFracArray-Mon")
}

record(subArray, "$(P)$(R)TuneFracArray-Mon") {
    field(DESC, "Fractional Tune Array")
    field(PREC, "3")
    field(FTVL, "DOUBLE")
    field(MALM, "32001")
    field(INP,  "$(P)$(R)TuneFracArrayWvf NPP NMS")
}

record(calc, "$(P)$(R)TuneFracStart-Mon") {
    field(DESC, "Fractional Tune start number")
    field(PREC, "3")
    field(INPA, "$(SPEC_ANA)FreqStart-RB CPP NMS")
    field(INPB, "$(P)$(R)RFFreq-Mon CPP NMS")
    field(INPC, "$(P)$(R)H-RB CPP NMS")
    field(INPD, "$(P)$(R)RevN-RB CPP NMS")
    field(CALC, "A/(B/C)")
}

record(calc, "$(P)$(R)TuneFracStop-Mon") {
    field(DESC, "Fractional Tune stop number")
    field(PREC, "3")
    field(INPA, "$(SPEC_ANA)FreqStop-RB CPP NMS")
    field(INPB, "$(P)$(R)RFFreq-Mon CPP NMS")
    field(INPC, "$(P)$(R)H-RB CPP NMS")
    field(INPD, "$(P)$(R)RevN-RB CPP NMS")
    field(CALC, "A/(B/C)")
}

record(waveform,"$(P)$(R)FreqArrayWvf") {
    field(DESC, "Frequency Array")
    field(PREC, "3")
    field(EGU,  "MHz")
    field(FTVL, "DOUBLE")
    field(NELM, "32001")
    field(INP,  "$(SPEC_ANA)FreqArray-Mon.AVAL CPP NMS")
    field(FLNK, "$(P)$(R)FreqArray-Mon")
}

record(subArray, "$(P)$(R)FreqArray-Mon") {
    field(DESC, "Frequency Array")
    field(PREC, "3")
    field(FTVL, "DOUBLE")
    field(MALM, "32001")
    field(EGU,  "MHz")
    field(INP,  "$(P)$(R)FreqArrayWvf NPP NMS")
}

record(bo, "$(P)$(R)TuneXaxis-Sel") {
    field(DESC, "Toggle Frac Tune or Frequency")
    field(ONAM, "Frac Tune")
    field(ZNAM, "Frequency")
}

############################################################
# ROI
#
# Desc: Roegion of Interest.
############################################################

record(ao, "$(P)$(R)ROIOffsetX-SP")
{
    field(DESC, "Set ROI Offset X")
    field(PINI, "YES")
    field(PREC, "6")
    field(SCAN, "Passive")
    field(EGU,  "MHz")
    field(FLNK, "$(P)$(R)ROIOffXConvD-Mon")
}

record(calcout, "$(P)$(R)ROIOffXConvD-Mon") {
    field(DESC, "ROI Offset X in Graph pixels")
    field(EGU,  "pixel")
    field(INPA, "$(P)$(R)ROIOffsetX-SP")
    field(INPB, "$(SPEC_ANA)FreqStartDisp-Mon CPP NMS")
    field(INPC, "$(SPEC_ANA)FreqStopDisp-Mon CPP NMS")
    field(INPD, "$(SPEC_ANA)SwePts-RB CPP NMS")
    field(CALC, "(A<B)?0:((A>C)?D:FLOOR((A-B)*D/(C-B)))")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)ROIOffXConv-SP PP")
    field(FLNK, "$(P)$(R)ROIOffsetX-RB")
}

record(longout, "$(P)$(R)ROIOffXConv-SP") {
    field(DESC, "ROI Offset X in Graph pixels")
    field(EGU,  "pixel")
    field(FLNK, "$(P)$(R)ROIOffXConv-RB")
}

record(longin, "$(P)$(R)ROIOffXConv-RB") {
    field(DESC, "ROI Offset X in Graph pixels")
    field(INP,  "$(P)$(R)ROIOffXConv-SP")
    field(EGU,  "pixel")
}

record(calcout, "$(P)$(R)ROIOffXConvL-Mon") {
    field(DESC, "ROI Offset X in Graph MHz")
    field(EGU,  "MHz")
    field(INPA, "$(P)$(R)ROIOffXConv-RB CPP NMS")
    field(INPB, "$(SPEC_ANA)FreqStartDisp-Mon NPP NMS")
    field(INPC, "$(SPEC_ANA)FreqStopDisp-Mon NPP NMS")
    field(INPD, "$(SPEC_ANA)SwePts-RB NPP NMS")
    field(CALC, "(A<0)?B:((A>D)?C:(A*(C-B)/D+B))")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)ROIOffsetX-SP PP")
}

record(ai, "$(P)$(R)ROIOffsetX-RB")
{
    field(DESC, "Get ROI Offset X")
    field(INP,  "$(P)$(R)ROIOffsetX-SP")
    field(PREC, "6")
    field(SCAN, "Passive")
    field(EGU,  "MHz")
}

record(ao, "$(P)$(R)ROIOffsetY-SP")
{
    field(DESC, "Set ROI Offset Y")
    field(PINI, "YES")
    field(PREC, "1")
    field(SCAN, "Passive")
    field(EGU,  "ms")
    field(FLNK, "$(P)$(R)ROIOffYConvD-Mon")
}

record(calcout, "$(P)$(R)ROIOffYConvD-Mon") {
    field(DESC, "ROI Offset Y conversion")
    field(EGU,  "pixel")
    field(INPA, "$(P)$(R)ROIOffsetY-SP")
    field(INPB, "$(P)$(R)SpecAnaTBeg-Mon CPP NMS")
    field(INPC, "$(P)$(R)SpecAnaTEnd-Mon CPP NMS")
    field(INPD, "$(P)$(R)SpecAnaTDelta-Mon CPP NMS")
    field(INPE, "$(SPEC_ANA)FrameCount-Mon CPP NMS")
    field(CALC, "(A<B)?E:((A>C)?0:FLOOR((D-(A-B))*E/D))")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)ROIOffYConv-SP PP")
    field(FLNK, "$(P)$(R)ROIOffsetY-RB")
}

record(longout, "$(P)$(R)ROIOffYConv-SP") {
    field(DESC, "ROI Offset Y in Graph pixels")
    field(EGU,  "pixel")
    field(FLNK, "$(P)$(R)ROIOffYConv-RB")
}

record(longin, "$(P)$(R)ROIOffYConv-RB") {
    field(DESC, "ROI Offset Y in Graph pixels")
    field(INP,  "$(P)$(R)ROIOffYConv-SP")
    field(EGU,  "pixel")
}

record(calcout, "$(P)$(R)ROIOffYConvL-Mon") {
    field(DESC, "ROI Offset Y in Graph ms")
    field(EGU,  "ms")
    field(INPA, "$(P)$(R)ROIOffYConv-RB CPP NMS")
    field(INPB, "$(P)$(R)SpecAnaTBeg-Mon NPP NMS")
    field(INPC, "$(P)$(R)SpecAnaTEnd-Mon NPP NMS")
    field(INPD, "$(P)$(R)SpecAnaTDelta-Mon NPP NMS")
    field(INPE, "$(SPEC_ANA)FrameCount-Mon NPP NMS")
    field(CALC, "(A<0)?C:((A>E)?B:((E-A)*D/E+B))")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)ROIOffsetY-SP PP")
}

record(ai, "$(P)$(R)ROIOffsetY-RB")
{
    field(DESC, "Get ROI Offset Y")
    field(INP,  "$(P)$(R)ROIOffsetY-SP")
    field(PREC, "1")
    field(SCAN, "Passive")
    field(EGU,  "ms")
}

record(ao, "$(P)$(R)ROIWidth-SP")
{
    field(DESC, "Set ROI Width")
    field(PINI, "YES")
    field(PREC, "6")
    field(SCAN, "Passive")
    field(EGU,  "MHz")
    field(FLNK, "$(P)$(R)ROIWidthConvD-Mon")
}

record(calcout, "$(P)$(R)ROIWidthConvD-Mon") {
    field(DESC, "ROI Width in Graph pixels")
    field(EGU,  "pixel")
    field(INPA, "$(P)$(R)ROIWidth-SP")
    field(INPB, "$(SPEC_ANA)FreqStartDisp-Mon CPP NMS")
    field(INPC, "$(SPEC_ANA)FreqStopDisp-Mon CPP NMS")
    field(INPD, "$(SPEC_ANA)SwePts-RB CPP NMS")
    field(CALC, "(A<0)?0:((A>(C-B))?D:FLOOR(A*D/(C-B)))")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)ROIWidthConv-SP PP")
    field(FLNK, "$(P)$(R)ROIWidth-RB")
}

record(longout, "$(P)$(R)ROIWidthConv-SP") {
    field(DESC, "ROI Width in Graph pixels")
    field(EGU,  "pixel")
    field(FLNK, "$(P)$(R)ROIWidthConv-RB")
}

record(longin, "$(P)$(R)ROIWidthConv-RB") {
    field(DESC, "ROI Width in Graph pixels")
    field(INP,  "$(P)$(R)ROIWidthConv-SP")
    field(EGU,  "pixel")
}

record(calcout, "$(P)$(R)ROIWidthConvL-Mon") {
    field(DESC, "ROI Width in Graph MHz")
    field(EGU,  "MHz")
    field(INPA, "$(P)$(R)ROIWidthConv-RB CPP NMS")
    field(INPB, "$(SPEC_ANA)FreqStartDisp-Mon NPP NMS")
    field(INPC, "$(SPEC_ANA)FreqStopDisp-Mon NPP NMS")
    field(INPD, "$(SPEC_ANA)SwePts-RB NPP NMS")
    field(CALC, "(A<0)?B:((A>D)?C:(A*(C-B)/D))")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)ROIWidth-SP PP")
}

record(ai, "$(P)$(R)ROIWidth-RB")
{
    field(DESC, "Get ROI Width")
    field(INP,  "$(P)$(R)ROIWidth-SP")
    field(PREC, "6")
    field(SCAN, "Passive")
    field(EGU,  "MHz")
}

record(ao, "$(P)$(R)ROIHeight-SP")
{
    field(DESC, "Set ROI Height")
    field(PINI, "YES")
    field(PREC, "1")
    field(SCAN, "Passive")
    field(EGU,  "ms")
    field(FLNK, "$(P)$(R)ROIHeightConvD-Mon")
}

record(calcout, "$(P)$(R)ROIHeightConvD-Mon") {
    field(DESC, "ROI Height in Graph pixels")
    field(EGU,  "pixel")
    field(INPA, "$(P)$(R)ROIHeight-SP")
    field(INPB, "$(P)$(R)SpecAnaTBeg-Mon CPP NMS")
    field(INPC, "$(P)$(R)SpecAnaTEnd-Mon CPP NMS")
    field(INPD, "$(P)$(R)SpecAnaTDelta-Mon CPP NMS")
    field(INPE, "$(SPEC_ANA)FrameCount-Mon CPP NMS")
    field(CALC, "(A<0)?0:((A>D)?E:FLOOR(A*E/D))")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)ROIHeightConv-SP PP")
    field(FLNK, "$(P)$(R)ROIHeight-RB")
}

record(longout, "$(P)$(R)ROIHeightConv-SP") {
    field(DESC, "ROI Height in Graph pixels")
    field(EGU,  "pixel")
    field(FLNK, "$(P)$(R)ROIHeightConv-RB")
}

record(longin, "$(P)$(R)ROIHeightConv-RB") {
    field(DESC, "ROI Height in Graph pixels")
    field(INP,  "$(P)$(R)ROIHeightConv-SP")
    field(EGU,  "pixel")
}

record(calcout, "$(P)$(R)ROIHeightConvL-Mon") {
    field(DESC, "ROI Height in Graph ms")
    field(EGU,  "ms")
    field(INPA, "$(P)$(R)ROIHeightConv-RB CPP NMS")
    field(INPB, "$(P)$(R)SpecAnaTBeg-Mon NPP NMS")
    field(INPC, "$(P)$(R)SpecAnaTEnd-Mon NPP NMS")
    field(INPD, "$(P)$(R)SpecAnaTDelta-Mon NPP NMS")
    field(INPE, "$(SPEC_ANA)FrameCount-Mon NPP NMS")
    field(CALC, "(A<0)?B:((A>E)?D:(A*D/E))")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)ROIHeight-SP PP")
}

record(ai, "$(P)$(R)ROIHeight-RB")
{
    field(DESC, "Get ROI Height")
    field(INP,  "$(P)$(R)ROIHeight-SP")
    field(PREC, "1")
    field(SCAN, "Passive")
    field(EGU,  "ms")
}

# ROI Auto Settings

# It should be SpecAnaRBW-Sts, but RVAL is not working
record(calcout, "$(P)$(R)ROIOffXAC") {
    field(DESC, "Auto ROI Offset X")
    field(EGU, "MHz")
    field(INPA, "$(P)$(R)SpecAnaRBW-Sel.RVAL CPP")
    field(INPB, "$(P)$(R)CenterFreq-RB CPP")
    field(INPC, "$(P)$(R)ROIAuto-Sts CPP")
    field(CALC, "C>0")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "B-(A/1000000)/2")
}

record(calcout, "$(P)$(R)ROIOffYAC") {
    field(DESC, "Auto ROI Offset Y")
    field(EGU, "MHz")
    field(INPA, "$(P)$(R)SpecAnaTEnd-Mon CPP")
    field(INPB, "0")
    field(INPC, "$(P)$(R)ROIAuto-Sts CPP")
    field(CALC, "C>0")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "A")
}

# It should be SpecAnaRBW-Sts, but RVAL is not working
record(calcout, "$(P)$(R)ROIWdtAC") {
    field(DESC, "Auto ROI Width")
    field(EGU, "MHz")
    field(INPA, "$(P)$(R)SpecAnaRBW-Sel.RVAL CPP")
    field(INPB, "$(P)$(R)ROIAuto-Sts CPP")
    field(CALC, "B>0")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "A/1000000")
}

record(calcout, "$(P)$(R)ROIHgtAC") {
    field(DESC, "Auto ROI Height")
    field(EGU, "ms")
    field(INPA, "$(P)$(R)SpecAnaTDelta-Mon CPP NMS")
    field(INPB, "$(P)$(R)ROIAuto-Sts CPP")
    field(CALC, "B>0")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "A")
}

record(bo, "$(P)$(R)ROIAuto-Sel"){
    field(DESC, "Enable automatic ROI")
    field(PINI, "YES")
    field(ZNAM, "0")
    field(ONAM, "1")
    field(FLNK, "$(P)$(R)ROIAuto-Sts")
}

record(bi, "$(P)$(R)ROIAuto-Sts"){
    field(DESC, "Get automatic ROI")
    field(INP,  "$(P)$(R)ROIAuto-Sel")
    field(ZNAM, "0")
    field(ONAM, "1")
}

# For use with seq record below
# 5=(STR1 and STR3) or 10=(STR2 and STR4)
record(calc, "$(P)$(R)ROIAutoIdxCalc"){
    field(DESC, "Get ROI auto propagation index")
    field(SCAN, "Passive")
    field(INPA, "$(P)$(R)ROIAuto-Sts.VAL CPP NMS")
    field(CALC, "A=0?5:10")
}

# ROI Offset X
record(sseq, "$(P)$(R)ROIAutoPropSseqOffX"){
    field(DESC, "Get all types of ao OMSL")
    field(PINI, "YES")
    field(STR1, "supervisory")
    field(STR2, "closed_loop")
    field(STR3, "0")
    field(STR4, "$(P)$(R)ROIOffXAC.OVAL CPP MS")
    field(LNK1, "$(P)$(R)ROIOffsetX-SP.OMSL NPP NMS")
    field(LNK2, "$(P)$(R)ROIOffsetX-SP.OMSL NPP NMS")
    field(LNK3, "$(P)$(R)ROIOffsetX-SP.DOL CA NMS")
    field(LNK4, "$(P)$(R)ROIOffsetX-SP.DOL CA NMS")
    field(SELL, "$(P)$(R)ROIAutoIdxCalc CPP MS")
    field(SELM, "Mask")
    field(SELN, "1")
    field(FLNK, "$(P)$(R)ROIAutoOffXFilter-SP")
}

# Checks if we need to Process ROI after setting
# ROIAutoOffX to 1. This synchornizes the "Span" value
# to the ROI even if the "Span" value didn't
# change
record(calcout, "$(P)$(R)ROIAutoOffXFilter-SP"){
    field(DESC, "Set FLNK to records")
    field(INPA, "$(P)$(R)ROIAuto-Sts NPP NMS")
    field(CALC, "A>0")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)$(R)ROIAutoOffXFout.PROC PP")
}

record(fanout, "$(P)$(R)ROIAutoOffXFout"){
    field(DESC, "Fanout center freq auto FLNK")
    field(SELM, "All")
    field(LNK1, "$(P)$(R)ROIOffsetX-SP")
}

# ROI Offset Y
record(sseq, "$(P)$(R)ROIAutoPropSseqOffY"){
    field(DESC, "Get all types of ao OMSL")
    field(PINI, "YES")
    field(STR1, "supervisory")
    field(STR2, "closed_loop")
    field(STR3, "0")
    field(STR4, "$(P)$(R)ROIOffYAC.OVAL CPP MS")
    field(LNK1, "$(P)$(R)ROIOffsetY-SP.OMSL NPP NMS")
    field(LNK2, "$(P)$(R)ROIOffsetY-SP.OMSL NPP NMS")
    field(LNK3, "$(P)$(R)ROIOffsetY-SP.DOL CA NMS")
    field(LNK4, "$(P)$(R)ROIOffsetY-SP.DOL CA NMS")
    field(SELL, "$(P)$(R)ROIAutoIdxCalc CPP MS")
    field(SELM, "Mask")
    field(SELN, "1")
    field(FLNK, "$(P)$(R)ROIAutoOffYFilter-SP")
}

# Checks if we need to Process ROI after setting
# ROIAutoOffY to 1. This synchornizes the "Span" value
# to the ROI even if the "Span" value didn't
# change
record(calcout, "$(P)$(R)ROIAutoOffYFilter-SP"){
    field(DESC, "Set FLNK to records")
    field(INPA, "$(P)$(R)ROIAuto-Sts NPP NMS")
    field(CALC, "A>0")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)$(R)ROIAutoOffYFout.PROC PP")
}

record(fanout, "$(P)$(R)ROIAutoOffYFout"){
    field(DESC, "Fanout center freq auto FLNK")
    field(SELM, "All")
    field(LNK1, "$(P)$(R)ROIOffsetY-SP")
}

# ROI Width
record(sseq, "$(P)$(R)ROIAutoPropSseqWidth"){
    field(DESC, "Get all types of ao OMSL")
    field(PINI, "YES")
    field(STR1, "supervisory")
    field(STR2, "closed_loop")
    field(STR3, "0")
    field(STR4, "$(P)$(R)ROIWdtAC.OVAL CPP MS")
    field(LNK1, "$(P)$(R)ROIWidth-SP.OMSL NPP NMS")
    field(LNK2, "$(P)$(R)ROIWidth-SP.OMSL NPP NMS")
    field(LNK3, "$(P)$(R)ROIWidth-SP.DOL CA NMS")
    field(LNK4, "$(P)$(R)ROIWidth-SP.DOL CA NMS")
    field(SELL, "$(P)$(R)ROIAutoIdxCalc CPP MS")
    field(SELM, "Mask")
    field(SELN, "1")
    field(FLNK, "$(P)$(R)ROIAutoWidthFilter-SP")
}

# Checks if we need to Process ROI after setting
# ROIAutoWidth to 1. This synchornizes the "Span" value
# to the ROI even if the "Span" value didn't
# change
record(calcout, "$(P)$(R)ROIAutoWidthFilter-SP"){
    field(DESC, "Set FLNK to records")
    field(INPA, "$(P)$(R)ROIAuto-Sts NPP NMS")
    field(CALC, "A>0")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)$(R)ROIAutoWidthFout.PROC PP")
}

record(fanout, "$(P)$(R)ROIAutoWidthFout"){
    field(DESC, "Fanout center freq auto FLNK")
    field(SELM, "All")
    field(LNK1, "$(P)$(R)ROIWidth-SP")
}

# ROI Height
record(sseq, "$(P)$(R)ROIAutoPropSseqHeight"){
    field(DESC, "Get all types of ao OMSL")
    field(PINI, "YES")
    field(STR1, "supervisory")
    field(STR2, "closed_loop")
    field(STR3, "0")
    field(STR4, "$(P)$(R)ROIHgtAC.OVAL CPP MS")
    field(LNK1, "$(P)$(R)ROIHeight-SP.OMSL NPP NMS")
    field(LNK2, "$(P)$(R)ROIHeight-SP.OMSL NPP NMS")
    field(LNK3, "$(P)$(R)ROIHeight-SP.DOL CA NMS")
    field(LNK4, "$(P)$(R)ROIHeight-SP.DOL CA NMS")
    field(SELL, "$(P)$(R)ROIAutoIdxCalc CPP MS")
    field(SELM, "Mask")
    field(SELN, "1")
    field(FLNK, "$(P)$(R)ROIAutoHeightFilter-SP")
}

# Checks if we need to Process ROI after setting
# ROIAutoHeight to 1. This synchornizes the "Span" value
# to the ROI even if the "Span" value didn't
# change
record(calcout, "$(P)$(R)ROIAutoHeightFilter-SP"){
    field(DESC, "Set FLNK to records")
    field(INPA, "$(P)$(R)ROIAuto-Sts NPP NMS")
    field(CALC, "A>0")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)$(R)ROIAutoHeightFout.PROC PP")
}

record(fanout, "$(P)$(R)ROIAutoHeightFout"){
    field(DESC, "Fanout center freq auto FLNK")
    field(SELM, "All")
    field(LNK1, "$(P)$(R)ROIHeight-SP")
}

############################################################
# AUTOSAVE
#
# Desc: autosave.

record(bo, "$(P)$(R)Save-Cmd"){
    field(DESC, "Manual 'Save Settings' command")
    field(MASK, "1")
    field(ZNAM, "Dsbl")
    field(ONAM, "Enbl")
    field(HIGH, "1")
}
